
//        Runtime runtime = Runtime.getRuntime();
//
//        String path = Paths.get("").toAbsolutePath().toString();
//        path += "\\src\\main\\java\\pmfi\\datasets\\";


        //-----
        //PMFITree: 13s, 500MB; APMFITree: 12s, 476MB (relative support 0.9, confidence: 0.1)
        //PMFITree: 14s, 510MB; APMFITree: 11s, 502MB (relative support 0.9, confidence: 0.01)
        //PMFITree: 12s, 625MB; APMFITree: 8s, 581MB (relative support 0.9, confidence: 0.001)
        //-----
        //PMFITree: 170s; 1132MB. APMFITree: 58s, 1458MB (support 0.1, confidence: 0.9)
        //PMFITree: 26s, 1289; APMFITree: 25s, 283MB (support 0.5, confidence: 0.9)
        //PMFITree: 23s, 1365MB; APMFITree: 25s, 1290MB (support 1, confidence: 0.9)
//        String pathDataset = path + "T40I10D100K.txt";
//        double mean = 0.79;
//        double variance = 0.61;



        //PMFITree: 1.2s, 447MB; APMFITree: 1s, 370MB (relative support 0.9, confidence: 0.0001)
        //PMFITree: 1.3s, 372MB; APMFITree: 1s, 371MB (relative support 0.9, confidence: 0.001)
        //PMFITree: 1s, 377MB; APMFITree: 1.2s, 371MB (relative support 0.9, confidence: 0.01)
        //PMFITree: 1s, 369MB ; APMFITree: 1s, 371MB (relative support 0.9, confidence: 0.1)
        //-----
        //PMFITree: 4s, 1050MB; APMFITree: 3.2s, 578MB (support 0.3, confidence: 0.9)
        //PMFITree: 3.3s, 981MB; APMFITree: 3.1s, 443MB (support 0.5, confidence: 0.9)
        //PMFITree: 3.4s, 1050MB; APMFITree: 2.9s, 773MB (support 0.7, confidence: 0.9)
        //PMFITree: 2.7s, 529MB; APMFITree: 2.7s, 684MB (support 0.9, confidence: 0.9)
        //-----
//        String pathDataset = path + "connect4.txt";
//        double mean = 0.78;
//        double variance = 0.65;


        //PMFITree: 17s, 1525MB; APMFITree: 17s, 1608MB (relative support 0.9, confidence: 0.00001)
        //PMFITree: 18s, 1835MB; APMFITree: 16s, 1348MB (relative support 0.9, confidence: 0.0001)
        //PMFITree: 17s, 1384MB; APMFITree: 16s, 1766MB (relative support 0.9, confidence: 0.001)
        //PMFITree: 20s, 1526MB; APMFITree: 16s, 1349MB (relative support 0.9, confidence: 0.01)
        //PMFITree: 17s, 1446MB; APMFITree: 19s, 1539MB (relative support 0.9, confidence: 0.1)
        //-----
        //PMFITree: 800s, 1900MB; APMFITree: 247s, 3110MB (support 0.08, confidence: 0.9)
        //PMFITree: 780s, 3352MB; APMFITree: 196s, 3282MB (support 0.1, confidence: 0.9)
        //PMFITree: 53s, 2419MB ; APMFITree: 49s, 2758MB (support 0.2, confidence: 0.9)
        //PMFITree: 49s, 2419MB ; APMFITree: 43s, 1630MB (support 0.5, confidence: 0.9)
        //PMFITree: 45s, 2080MB; APMFITree: 40s, 2599MB (support 0.9, confidence: 0.9)
        //PMFITree: 37s, 2751MB; APMFITree: 33s, 2079MB (support 1, confidence: 0.9)
        //-----
//        String pathDataset = path + "accidents.txt";
//        double mean = 0.5;
//        double variance = 0.58;



        //PMFITree: 2s, 44MB; APMFITree: 2.2s, 44MB  (relative support 0.9, confidence: 0.1)
        //PMFITree: 1.5s, 53MB; APMFITree: 1.6s, 46MB  (relative support 0.9, confidence: 0.01)
        //PMFITree: 1.4s, 49MB; APMFITree: 1.4s, 46MB  (relative support 0.9, confidence: 0.001)
        //PMFITree: 1.6s, 46MB; APMFITree: 1.5s, 58MBs  (relative support 0.9, confidence: 0.0001)
        //-----
        //PMFITree: 3.5s, 105MB; APMFITree: 3s, 245MB  (support 1, confidence: 0.9)
        //PMFITree: 4s, 76MB; APMFITree: 3.3s, 309MB  (support 0.1, confidence: 0.9)
        //PMFITree: 5s, 144MB; APMFITree: 4s, 294MB  (support 0.01, confidence: 0.9)
        //-----
//        String pathDataset = path + "GAZELLE.txt";
//        double mean = 0.94;
//        double variance = 0.08;

//        MyDataset myDataset = new MyDataset(pathDataset, mean, variance);
//        UncertainDatabase uncertainDatabase = myDataset.getUncertainDatabase();
//        System.out.println(uncertainDatabase);
//
//        //the number of transaction in database
//        int lengthDb = myDataset.getUncertainDatabase().getUncertainTransactions().size();
//
//        double minSupport = 0.7;
//        double minConfidence = 0.9;
//
//        //run algorithms
//        PMFIT pmfit = new PMFIT(uncertainDatabase, minSupport, minConfidence);
//
//        //get time at start algorithm
//        long start = System.nanoTime();
//
//
//        pmfit.findAllPMFI();
//
//        //memory when we run algorithm
//        long memoryTotal = runtime.totalMemory();
//        long memoryFree = runtime.freeMemory();
//
//        //example1();
//        //example2();
//
//        //exampleApproximatePMFIT();
//
//        System.out.println();
//
//        // get time at end algorithm
//        long end = System.nanoTime();
//
//        // execution time in seconds
//        long execution = end - start;
//
//        //calculate memory usage
//        long memoryUsage = memoryTotal - memoryFree;
//
//        System.out.println("Execution time of Program is");
//        System.out.println(execution / MILI_SECOND + " milliseconds");
//        System.out.println("Memory usage: ");
//        System.out.println(memoryUsage / MB + " MB");
